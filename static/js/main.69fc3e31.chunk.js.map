{"version":3,"sources":["providers/data.ts","providers/useStats.tsx","providers/useDailyStats.tsx","providers/useTopCountriesStats.tsx","stats/SummaryStats.tsx","utils/Chart.tsx","utils/LoadAnimation.tsx","stats/DatePicker.tsx","stats/WorldStats.tsx","stats/CountryPicker.tsx","utils/BarChart.tsx","stats/CountryStats.tsx","stats/Main.tsx","index.tsx"],"names":["API_PATH","get","url","a","fetch","result","json","useStats","useState","stats","setStats","error","setError","useEffect","isError","data","message","fetchStats","object","undefined","START_DATE","Date","useDailyStats","startDate","allDailyStats","setAllDailyStats","dates","getDates","getYesterday","results","map","date","toLocaleDateString","replace","forEach","countryRegion","countryRegionStats","confirmed","getNumber","recovered","deaths","currentCountry","Promise","all","fetchDailyStats","stringNumber","parseInt","start","end","current","push","setDate","getDate","SummaryStatus","props","className","title","colors","Chart","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","xAxisKey","yAxisKeys","yAxis","i","type","dot","key","stroke","color","fill","strokeWidth","LoadAnimation","todayDate","toISOString","split","DatePicker","dateString","setDateString","min","max","onChange","e","currentTarget","value","console","log","setFromDate","WorldStats","topCountriesChartData","setTopCountriesChartData","worldDailyChart","setWorldDailyChart","fromDate","worldStats","worldDailyStats","maxCountries","topCountriesNames","setTopCountriesNames","topCountriesStats","setTopCountriesStats","allCountries","countries","reduce","region","Object","entries","sort","b","slice","country","fetchTopCountries","dailyStats","keys","length","stat","names","useTopCountriesStats","countriesNames","chartData","first","second","getTime","changeDateFormat","findIndex","reportDate","totalConfirmed","total","_","CountryPicker","setCountry","setCountryName","countryIso2","find","iso2","name","findFullCountryName","barKeys","CountryStats","countryName","dailyChartData","setDailyChartData","deltaChart","setDeltaChart","countryStats","countryError","delta","prevDay","currDay","confirmedDelta","Math","abs","deathsDelta","recoveredDelta","Main","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.69fc3e31.chunk.js","sourcesContent":["const API_PATH = \"https://covid19.mathdro.id/api/\";\n\nexport async function get<T>(url: string): Promise<T> {\n    const result = await fetch(API_PATH + url);\n    return await result.json();\n}","import { useState, useEffect } from \"react\";\n\nimport { ErrorMsg } from \"../utils/types\";\nimport { get } from \"./data\";\n\ninterface Stats<T> {\n    stats: T | undefined;\n    error: Error | string | null;\n}\n\nexport function useStats<T>(url: string = \"\"): Stats<T> {\n    const [stats, setStats] = useState<T>();\n    const [error, setError] = useState<Error | string | null>(null);\n\n    useEffect(() => {\n        async function fetchStats() {\n            try {\n                const data = await get<T>(url);\n\n                if (isError(data)) setError(data.error.message);\n                else setStats(data);\n            } catch (e) {\n                setError(e);\n            }\n        }\n        setError(null);\n        fetchStats();\n    }, [url]);\n\n    return {\n        stats,\n        error,\n    };\n}\n\nfunction isError(object: any): object is ErrorMsg {\n    return object.error !== undefined;\n}","import { useEffect, useState } from \"react\";\n\nimport { Dictionary, DailySummaryCountryRegion } from \"../utils/types\";\nimport { get } from \"./data\";\n\ninterface Stat {\n    confirmed: number;\n    recovered: number;\n    deaths: number;\n}\n\nconst START_DATE = new Date(\"1/22/2020\");\n\nexport function useDailyStats(startDate: Date = START_DATE) {\n    const [allDailyStats, setAllDailyStats] = useState<Dictionary<Dictionary<Stat>>>({});\n\n    useEffect(() => {\n        async function fetchDailyStats() {\n            const dates = getDates(startDate, getYesterday());\n            const stats: Dictionary<Dictionary<Stat>> = {};\n\n            const results = dates.map(date => date.toLocaleDateString().replace(/\\//g, '-')).map(async (date) => {\n                const data = await get<DailySummaryCountryRegion[]>(`daily/${date}`);\n\n                data.forEach(countryRegion => {\n                    const countryRegionStats = {\n                        confirmed: getNumber(countryRegion.confirmed),\n                        recovered: getNumber(countryRegion.recovered),\n                        deaths: getNumber(countryRegion.deaths),\n                    }\n\n                    if (countryRegion.countryRegion === \"Mainland China\") countryRegion.countryRegion = \"China\";\n\n                    if (!stats[countryRegion.countryRegion]) stats[countryRegion.countryRegion] = { [date]: countryRegionStats };\n                    else if (stats[countryRegion.countryRegion][date]) {\n                        const currentCountry = stats[countryRegion.countryRegion][date];\n                        stats[countryRegion.countryRegion][date] = {\n                            confirmed: countryRegionStats.confirmed + currentCountry.confirmed,\n                            recovered: countryRegionStats.recovered + currentCountry.recovered,\n                            deaths: countryRegionStats.deaths + currentCountry.deaths,\n                        }\n                    }\n                    else stats[countryRegion.countryRegion][date] = countryRegionStats; \n                });\n            });\n\n            await Promise.all(results);\n            setAllDailyStats(stats);\n        }\n\n        fetchDailyStats();\n    }, []);\n\n    return allDailyStats;\n}\n\nfunction getNumber(stringNumber: string) {\n    return stringNumber !== \"\" ? parseInt(stringNumber) : 0;\n}\n\nfunction getDates(start: Date, end: Date) {\n    const dates = [];\n    let current = new Date(start);\n\n    while (current < end) {\n        dates.push(new Date(current));\n        current.setDate(current.getDate() + 1);\n    }\n\n    return dates;\n};\n\nfunction getYesterday(): Date {\n    const date = new Date();\n    date.setDate(date.getDate() - 1);\n    return date;\n}","import { useEffect, useState } from \"react\";\n\nimport { Dictionary, CountryRegion } from \"../utils/types\";\nimport { useDailyStats } from \"./useDailyStats\";\nimport { get } from \"./data\";\n\nconst START_DATE = new Date(\"1/22/2020\");\n\nexport default function useTopCountriesStats(maxCountries: number, startDate: Date = new Date(START_DATE)) {\n    const [topCountriesNames, setTopCountriesNames] = useState<string[]>([]);\n    const [topCountriesStats, setTopCountriesStats] = useState<Dictionary<Dictionary<number>>>({});\n    const allDailyStats = useDailyStats(startDate);\n\n    useEffect(() => {\n        async function fetchTopCountries() {\n            const allCountries = await get<CountryRegion[]>(\"confirmed\");\n\n            const countries = allCountries\n                .reduce((allCountries, region) => {\n                    if (allCountries[region.countryRegion]) allCountries[region.countryRegion] += region.confirmed;\n                    else allCountries[region.countryRegion] = region.confirmed;\n\n                    return allCountries;\n                }, {} as Dictionary<number>);\n\n            setTopCountriesNames(Object.entries(countries)\n                .sort((a, b) => b[1] - a[1])\n                .slice(0, maxCountries)\n                .map(([country, confirmed]) => country));\n        }\n\n        fetchTopCountries();\n    }, [maxCountries]);\n\n    useEffect(() => {\n        const dailyStats: Dictionary<Dictionary<number>> = {};\n\n        if (topCountriesNames && Object.keys(allDailyStats).length > 0) {\n            topCountriesNames.map(country => { return { stats: allDailyStats[country], country } })\n                .forEach(({ stats, country }) => {\n                    // console.log(\"stats\", stats, country, allDailyStats);\n                    Object.entries(stats).forEach(([date, stat]) => {\n                        if (dailyStats[date]) dailyStats[date][country] = stat.confirmed;\n                        else dailyStats[date] = { [country]: stat.confirmed };\n                    })\n\n                })\n\n            console.log(\"dailyStats\", dailyStats);\n            setTopCountriesStats(dailyStats);\n        }\n\n    }, [allDailyStats]);\n\n    return {stats: topCountriesStats, names: topCountriesNames};\n}","import \"./SummaryStats.scss\";\n\nimport React from \"react\";\n\ninterface Props {\n    title?: string;\n    confirmed: number;\n    recovered: number;\n    deaths: number;\n}\n\nexport default function SummaryStatus(props: Props) {\n    return <div className=\"stats-summary\">\n        {props.title && <div className=\"stats-title\">{props.title}</div>}\n        <div className=\"stats-group\">\n            <div className=\"stat\">\n                <div className=\"stat-label\">confirmed</div>\n                <div className=\"stat-number\">{props.confirmed}</div>\n            </div>\n            <div className=\"stat recoverd\">\n                <div className=\"stat-label\">recovered</div>\n                <div className=\"stat-number\">{props.recovered}</div>\n            </div>\n            <div className=\"stat deaths\">\n                <div className=\"stat-label\">deaths</div>\n                <div className=\"stat-number\">{props.deaths}</div>\n            </div>\n        </div>\n    </div>\n}","import \"./Chart.scss\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, } from 'recharts';\n\nconst colors = [\n    \"#8884d8\",\n    \"#82ca9d\",\n    \"#84d892\",\n    \"#d8ae84\",\n    \"#d88484\",\n    \"#b184d8\",\n    \"#84d7d8\",\n    \"#cd84d8\",\n    \"#a384d8\",\n    \"#d8849a\"\n];\n\nconst defaultWidth = 335;\nconst defaultHeight = 300;\n\ninterface Props {\n    title?: string;\n    width?: number;\n    height?: number;\n    data: any;\n    xAxisKey: string;\n    yAxisKeys: yAxisKey[];\n}\n\ninterface yAxisKey {\n    key: string;\n    color?: string;\n}\n\nexport default function Chart(props: Props) {\n    return <div className=\"chart\">\n        {props.title && <div className=\"chart-label\">{props.title}</div>}\n        <LineChart data={props.data}\n            width={props.width ? props.width : defaultWidth}\n            height={props.height ? props.height : defaultHeight}\n            margin={{ top: 5, right: 30, left: 20, bottom: 5, }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey={props.xAxisKey} />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            {props.yAxisKeys.map((yAxis, i) =>\n                <Line type=\"monotone\"\n                    dot={false}\n                    dataKey={yAxis.key}\n                    key={yAxis.key}\n                    stroke={yAxis.color ? yAxis.color : colors[i]}\n                    fill={yAxis.color ? yAxis.color : colors[i]}\n                    strokeWidth={2} />)}\n        </LineChart>\n    </div>\n}","import \"./LoadAnimation.scss\";\n\nimport React from \"react\";\n\nexport default function LoadAnimation() {\n    return <div className=\"lds-ring\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>;\n}","import React, { useState } from \"react\";\n\nconst todayDate = new Date().toISOString().split(\"T\")[0];\n\ninterface Props {\n    setFromDate: (date: Date) => void;\n    startDate: string;\n}\n\nexport default function DatePicker(props: Props) {\n    const [dateString, setDateString] = useState<string>(props.startDate);\n\n    function onChange(e: React.FormEvent<HTMLInputElement>) {\n        const date = new Date(e.currentTarget.value);\n        console.log(\"onchange\", date);\n        props.setFromDate(date);\n        setDateString(date.toISOString().split(\"T\")[0]);\n    }\n\n    return <div className=\"input-group\">\n        <div className=\"input-label\">Pick start date</div>\n        <input className=\"input\" type=\"date\" min=\"2020-01-22\" max={todayDate} onChange={onChange} value={dateString} />\n    </div>\n\n}","import React, { useEffect, useState } from \"react\";\n\nimport { useStats } from \"../providers/useStats\";\nimport useTopCountriesStats from \"../providers/useTopCountriesStats\";\nimport SummaryStatus from \"./SummaryStats\";\nimport { WorldSummary, WorldDailySummary } from \"../utils/types\";\nimport Chart from \"../utils/Chart\";\nimport LoadAnimation from \"../utils/LoadAnimation\";\nimport DatePicker from \"./DatePicker\";\n\nconst START_DATE = \"2020-03-01\";\n\ninterface DailyWorldChart {\n    date: string;\n    confirmed: number;\n    deaths: number;\n}\n\nexport default function WorldStats() {\n    const [topCountriesChartData, setTopCountriesChartData] = useState<any>([]);\n    const [worldDailyChart, setWorldDailyChart] = useState<DailyWorldChart[]>();\n    const [fromDate, setFromDate] = useState<Date>(new Date(START_DATE));\n    const { stats: worldStats } = useStats<WorldSummary>();\n    const { stats: worldDailyStats } = useStats<WorldDailySummary[]>(\"daily\");\n    const { stats: topCountriesStats, names: countriesNames } = useTopCountriesStats(10);\n\n    useEffect(() => {\n        const chartData = Object.entries(topCountriesStats)\n            .sort((first, second) => new Date(first[0]).getTime() - new Date(second[0]).getTime())\n            .map(([date, countries]) => { return { date: changeDateFormat(date), ...countries } });\n        setTopCountriesChartData(chartData.slice(chartData.findIndex((data) => data.date === fromDate.toLocaleDateString())));\n\n    }, [topCountriesStats, fromDate]);\n\n    useEffect(() => {\n        if (worldDailyStats) {\n            setWorldDailyChart(worldDailyStats.map(stat => {\n                return {\n                    date: stat.reportDate,\n                    confirmed: stat.totalConfirmed,\n                    deaths: stat.deaths.total\n                }\n            }).sort((first, second) => new Date(first.date).getTime() - new Date(second.date).getTime()));\n        }\n    }, [worldDailyStats])\n\n    return <>\n        {!worldStats && <LoadAnimation />}\n        {worldStats && <div>\n            <SummaryStatus confirmed={worldStats.confirmed.value}\n                recovered={worldStats.recovered.value}\n                deaths={worldStats.deaths.value}\n                title=\"World's Stats\" />\n        </div>}\n        {worldDailyChart && <div className=\"charts-group\">\n            <Chart data={worldDailyChart} xAxisKey=\"date\" title=\"Confirmed\"\n                yAxisKeys={[{ key: \"confirmed\" }]} width={450} />\n            <Chart data={worldDailyChart} xAxisKey=\"date\" title=\"Deaths\"\n                yAxisKeys={[{ key: \"deaths\", color: \"red\" }]} width={450} />\n        </div>} \n        <DatePicker startDate={START_DATE} setFromDate={setFromDate} />\n        {topCountriesChartData && countriesNames &&\n            <Chart data={topCountriesChartData} xAxisKey=\"date\" title=\"Top countries\"\n                yAxisKeys={countriesNames.map(_ => { return { key: _ } })} width={1000} height={450} />}\n    </>\n}\n\nfunction changeDateFormat(date: string) {\n    return date.replace(/-/g, \"/\");\n}","import \"./CountryPicker.scss\";\n\nimport React from \"react\";\n\nimport { useStats } from \"../providers/useStats\";\nimport { CountriesNames } from \"../utils/types\";\n\ninterface Props {\n    setCountry: (country: string) => void;\n    setCountryName: (name: string) => void;\n    country: string;\n}\n\nexport default function CountryPicker(props: Props) {\n    const { stats: countriesNames } = useStats<CountriesNames>(\"countries\");\n\n    function onCountryChange(e: React.FormEvent<HTMLSelectElement>) {\n        const country = e.currentTarget.value;\n\n        props.setCountry(country);\n        props.setCountryName(findFullCountryName(country));\n    }\n\n    function findFullCountryName(countryIso2: string) {\n        if (countriesNames) {\n            const result = countriesNames.countries.find(country => countryIso2 === country.iso2);\n            console.log(\"result\", result);\n            if (result) return result.name;\n        }\n\n        return \"cannot be found\";\n    }\n\n    return <div className=\"input-group\">\n        <div className=\"input-label\">Pick a country</div>\n        <select className=\"input\" onChange={onCountryChange} value={props.country}>\n            {countriesNames && countriesNames.countries.map(country =>\n                <option key={country.name} value={country.iso2}>\n                    {country.name}\n                </option>)}\n        </select>\n    </div>\n}","import React from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, } from 'recharts';\n\ninterface Props {\n    title?: string;\n    width: number;\n    height: number;\n    data: any;\n    xAxisKey: string;\n    barKeys: BarKey[];\n}\n\ninterface BarKey {\n    key: string;\n    color?: string;\n}\n\nexport default function Chart(props: Props) {\n    return <BarChart width={props.width} height={props.height} data={props.data} margin={{ top: 5, right: 30, left: 20, bottom: 5, }}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey={props.xAxisKey} />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        {props.barKeys.map(key => \n            <Bar dataKey={key.key} fill={key.color ? key.color : \"#8884d8\"} />\n        )}\n    </BarChart>\n}\n","import \"./CountryStats.scss\";\n\nimport React, { useState, useEffect } from \"react\";\n\nimport { useStats } from \"../providers/useStats\";\nimport { useDailyStats } from \"../providers/useDailyStats\";\nimport { CountrySummary } from \"../utils/types\";\nimport CountryPicker from \"./CountryPicker\";\nimport SummaryStatus from \"./SummaryStats\";\nimport LoadAnimation from \"../utils/LoadAnimation\";\nimport Chart from \"../utils/Chart\";\nimport BarChart from \"../utils/BarChart\";\n\ninterface Chart {\n    date: string;\n    confirmed: number;\n    deaths: number;\n    recovered: number;\n}\n\ninterface DailyDelta {\n    date: string;\n    confirmedDelta: number;\n    deathsDelta: number;\n    recoveredDelta: number;\n}\n\nexport default function CountryStats() {\n    const [country, setCountry] = useState<string>(\"IL\");\n    const [countryName, setCountryName] = useState<string>(\"Israel\");\n    const [dailyChartData, setDailyChartData] = useState<Chart[] | undefined>();\n    const [deltaChart, setDeltaChart] = useState<DailyDelta[]>();\n    const { stats: countryStats, error: countryError } = useStats<CountrySummary>(`countries/${country}`);\n    const dailyStats = useDailyStats();\n\n    const yAxisKeys = [\n        { key: \"confirmed\" },\n        { key: \"recovered\", color: \"green\" },\n        { key: \"deaths\", color: \"red\" }\n    ];\n\n    const barKeys = [\n        { key: \"confirmedDelta\" },\n        { key: \"recoveredDelta\", color: \"green\" },\n        { key: \"deathsDelta\", color: \"red\" }\n    ];\n\n    useEffect(() => {\n        if (dailyStats && dailyStats[countryName] && Object.entries(dailyStats[countryName]).length > 0)\n            setDailyChartData(Object.entries(dailyStats[countryName])\n                .map(([date, stat]) => {\n                    return { date, ...stat };\n                }).sort((first, second) => new Date(first.date).getTime() - new Date(second.date).getTime()));\n    }, [countryName, dailyStats]);\n\n    useEffect(() => {\n        console.log(1, \"dailyChartData\", dailyChartData);\n        if (dailyChartData) {\n            \n            const delta: DailyDelta[] = [];\n            const firstDayDelta: Chart = {\n                date: \"\",\n                confirmed: 0,\n                deaths: 0,\n                recovered: 0,\n            }\n            \n            dailyChartData.reduce((prevDay, currDay) => {\n                delta.push({\n                    date: currDay.date,\n                    confirmedDelta: Math.abs(currDay.confirmed - prevDay.confirmed),\n                    deathsDelta: Math.abs(currDay.deaths - prevDay.deaths),\n                    recoveredDelta: Math.abs(currDay.recovered - prevDay.recovered),\n                })\n                return currDay;\n            }, firstDayDelta);\n            \n            console.log(2, \"dailyChartData\", delta);\n            setDeltaChart(delta);\n        }\n    }, [dailyChartData])\n\n    return <>\n        {!countryStats && <LoadAnimation />}\n        {countryStats && <div>\n            {!countryError && <SummaryStatus confirmed={countryStats.confirmed.value}\n                deaths={countryStats.deaths.value}\n                recovered={countryStats.recovered.value}\n                title={countryName + \"'s Stats\"} />}\n            {countryError && <div>Could not find data for {countryName} at the moment...</div>}\n        </div>}\n        <CountryPicker setCountry={setCountry} setCountryName={setCountryName} country={country} />\n\n        {dailyStats && dailyChartData && deltaChart && <>\n            <Chart data={dailyChartData} xAxisKey=\"date\" yAxisKeys={yAxisKeys} width={1000} />\n            <div className=\"charts-group\">\n                {yAxisKeys.map(key =>\n                    <div key={key.key}><Chart data={dailyChartData} xAxisKey=\"date\" yAxisKeys={[key]} title={key.key} /></div>)}\n            </div>\n            <div className=\"charts-group\">\n                {barKeys.map(key =>\n                    <div key={key.key}><BarChart data={deltaChart} xAxisKey=\"date\" barKeys={[key]} width={335} height={300} /></div>)}\n            </div>\n        </>}\n    </>\n}","import \"./Main.scss\";\n\nimport React from \"react\";\n\nimport WorldStats from \"./WorldStats\";\nimport CountryStats from \"./CountryStats\";\n\nexport default function Main() {\n    return <div className=\"main\">\n        <div className=\"title\">Covid19 Statistics</div>\n        <div className=\"container\">\n            <WorldStats />\n        </div>\n        <div className=\"container\">\n            <CountryStats />\n        </div>\n    </div>\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './stats/Main';\n\nReactDOM.render(<Main />, document.getElementById('root'));"],"sourceRoot":""}