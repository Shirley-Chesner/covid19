{"version":3,"sources":["providers/data.ts","providers/useStats.tsx","providers/useDailyStats.tsx","components/SummaryStats.tsx","utils/Chart.tsx","utils/LoadAnimation.tsx","components/WorldStats.tsx","providers/useTopCountriesStats.tsx","components/CountryPicker.tsx","utils/BarChart.tsx","components/CountryStats.tsx","components/Main.tsx","index.tsx"],"names":["API_PATH","get","url","a","fetch","result","json","useStats","useState","stats","setStats","error","setError","useEffect","isError","data","message","fetchStats","object","undefined","useDailyStats","startDate","allDailyStats","setAllDailyStats","dates","getDates","getYesterday","results","map","date","toLocaleDateString","replace","forEach","countryRegion","confirmedNumber","confirmed","parseInt","recoverdNumber","recovered","deathsNumber","deaths","Promise","all","fetchDailyStats","start","end","current","Date","push","setDate","getDate","SummaryStatus","props","className","title","colors","Chart","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","xAxisKey","yAxisKeys","yAxis","i","type","dot","key","stroke","color","fill","strokeWidth","LoadAnimation","WorldStats","topCountriesChartData","setTopCountriesChartData","worldDailyChart","setWorldDailyChart","worldStats","worldDailyStats","maxCountries","topCountriesNames","setTopCountriesNames","topCountriesStats","setTopCountriesStats","allCountries","countries","reduce","region","Object","entries","sort","b","slice","country","fetchTopCountries","dailyStats","keys","length","stat","console","log","names","useTopCountriesStats","countriesNames","first","second","getTime","reportDate","totalConfirmed","total","value","_","CountryPicker","onChange","e","currentTarget","setCountry","setCountryName","countryIso2","find","iso2","name","findFullCountryName","barKeys","CountryStats","countryName","dailyChartData","setDailyChartData","deltaChart","setDeltaChart","countryStats","countryError","delta","prevDay","currDay","confirmedDelta","Math","abs","deathsDelta","recoveredDelta","Main","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf41e018.chunk.js","sourcesContent":["const API_PATH = \"https://covid19.mathdro.id/api/\";\n\nexport async function get<T>(url: string): Promise<T> {\n    const result = await fetch(API_PATH + url);\n    return await result.json();\n}","import { useState, useEffect } from \"react\";\n\nimport { ErrorMsg } from \"../utils/types\";\nimport { get } from \"./data\";\n\ninterface Stats<T> {\n    stats: T | undefined;\n    error: Error | string | null;\n}\n\nexport function useStats<T>(url: string = \"\"): Stats<T> {\n    const [stats, setStats] = useState<T>();\n    const [error, setError] = useState<Error | string | null>(null);\n\n    useEffect(() => {\n        async function fetchStats() {\n            try {\n                const data = await get<T>(url);\n\n                if (isError(data)) setError(data.error.message);\n                else setStats(data);\n            } catch (e) {\n                setError(e);\n            }\n        }\n        setError(null);\n        fetchStats();\n    }, [url]);\n\n    return {\n        stats,\n        error,\n    };\n}\n\nfunction isError(object: any): object is ErrorMsg {\n    return object.error !== undefined;\n}\n\n// function changeDateFormat()","import { useEffect, useState } from \"react\";\n\nimport { Dictionary, DailySummaryCountryRegion } from \"../utils/types\";\nimport { get } from \"./data\";\n\ninterface Stat {\n    confirmed: number;\n    recovered: number;\n    deaths: number;\n}\n\nexport function useDailyStats(startDate: Date) {\n    const [allDailyStats, setAllDailyStats] = useState<Dictionary<Dictionary<Stat>>>({});\n\n    useEffect(() => {\n        async function fetchDailyStats() {\n            const dates = getDates(startDate, getYesterday());\n\n            const stats: Dictionary<Dictionary<Stat>> = {};\n\n            const results = dates.map(date => date.toLocaleDateString().replace(/\\//g, '-')).map(async (date) => {\n                const data = await get<DailySummaryCountryRegion[]>(`daily/${date}`);\n\n                data.forEach(countryRegion => {\n                    const confirmedNumber = countryRegion.confirmed !== \"\" ? parseInt(countryRegion.confirmed) : 0;\n                    const recoverdNumber = countryRegion.recovered !== \"\" ? parseInt(countryRegion.recovered) : 0;\n                    const deathsNumber = countryRegion.deaths !== \"\" ? parseInt(countryRegion.deaths) : 0;\n                    if (countryRegion.countryRegion === \"Mainland China\")\n                        countryRegion.countryRegion = \"China\";\n\n                    if (!stats[countryRegion.countryRegion])\n                        stats[countryRegion.countryRegion] = {\n                            [date]: {\n                                confirmed: confirmedNumber,\n                                recovered: recoverdNumber,\n                                deaths: deathsNumber,\n                            }\n                        };\n                    else if (stats[countryRegion.countryRegion][date]) { //change it\n                        stats[countryRegion.countryRegion][date].confirmed += confirmedNumber;\n                        stats[countryRegion.countryRegion][date].recovered += recoverdNumber;\n                        stats[countryRegion.countryRegion][date].deaths += deathsNumber;\n                    }\n                    else {\n                        stats[countryRegion.countryRegion][date] = {\n                            confirmed: confirmedNumber,\n                            recovered: recoverdNumber,\n                            deaths: deathsNumber,\n                        }\n                    }\n                });\n            });\n\n            await Promise.all(results);\n\n            setAllDailyStats(stats);\n        }\n\n        fetchDailyStats();\n    }, []);\n\n    return allDailyStats;\n}\n\n\nfunction getDates(start: Date, end: Date) {\n    const dates = [];\n    let current = new Date(start);\n\n    while (current < end) {\n        dates.push(new Date(current));\n        current.setDate(current.getDate() + 1);\n    }\n\n    return dates;\n};\n\nfunction getYesterday(): Date {\n    const date = new Date();\n    date.setDate(date.getDate() - 1);\n    return date;\n}","import \"./SummaryStats.scss\";\n\nimport React from \"react\";\n\ninterface Props {\n    title?: string;\n    confirmed: number;\n    recovered: number;\n    deaths: number;\n}\n\nexport default function SummaryStatus(props: Props) {\n    return <div className=\"stats-summary\">\n        {props.title && <div className=\"stats-title\">{props.title}</div>}\n        <div className=\"stats-group\">\n            <div className=\"stat\">\n                <div className=\"stat-label\">confirmed</div>\n                <div className=\"stat-number\">{props.confirmed}</div>\n            </div>\n            <div className=\"stat recoverd\">\n                <div className=\"stat-label\">recovered</div>\n                <div className=\"stat-number\">{props.recovered}</div>\n            </div>\n            <div className=\"stat deaths\">\n                <div className=\"stat-label\">deaths</div>\n                <div className=\"stat-number\">{props.deaths}</div>\n            </div>\n        </div>\n    </div>\n}","import \"./Chart.scss\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, } from 'recharts';\n\nconst colors = [\n    \"#8884d8\",\n    \"#82ca9d\",\n    \"#84d892\",\n    \"#d8ae84\",\n    \"#d88484\",\n    \"#b184d8\",\n    \"#84d7d8\",\n    \"#cd84d8\",\n    \"#a384d8\",\n    \"#d8849a\"\n];\n\nconst defaultWidth = 335;\nconst defaultHeight = 300;\n\ninterface Props {\n    title?: string;\n    width?: number;\n    height?: number;\n    data: any;\n    xAxisKey: string;\n    yAxisKeys: yAxisKey[];\n}\n\ninterface yAxisKey {\n    key: string;\n    color?: string;\n}\n\nexport default function Chart(props: Props) {\n    return <div className=\"chart\">\n        {props.title && <div className=\"chart-label\">{props.title}</div>}\n        <LineChart data={props.data}\n            width={props.width ? props.width : defaultWidth}\n            height={props.height ? props.height : defaultHeight}\n            margin={{ top: 5, right: 30, left: 20, bottom: 5, }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey={props.xAxisKey} />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            {props.yAxisKeys.map((yAxis, i) =>\n                <Line type=\"monotone\"\n                    dot={false}\n                    dataKey={yAxis.key}\n                    key={yAxis.key}\n                    stroke={yAxis.color ? yAxis.color : colors[i]}\n                    fill={yAxis.color ? yAxis.color : colors[i]}\n                    strokeWidth={2} />)}\n        </LineChart>\n    </div>\n}","import \"./LoadAnimation.scss\";\n\nimport React from \"react\";\n\nexport default function LoadAnimation() {\n    return <div className=\"lds-ring\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>;\n}","import React, { useEffect, useState } from \"react\";\n\nimport { useStats } from \"../providers/useStats\";\nimport useTopCountriesStats from \"../providers/useTopCountriesStats\";\nimport SummaryStatus from \"./SummaryStats\";\nimport { WorldSummary, WorldDailySummary } from \"../utils/types\";\nimport Chart from \"../utils/Chart\";\nimport LoadAnimation from \"../utils/LoadAnimation\";\n\nconst START_DATE = \"3/1/2020\";//\"1/22/2020\";\n\ninterface DailyWorldChart {\n    date: string;\n    confirmed: number;\n    // recovered: number; api doesn't exist\n    deaths: number;\n}\n\nexport default function WorldStats() {\n    const [topCountriesChartData, setTopCountriesChartData] = useState<any>([]);\n    const [worldDailyChart, setWorldDailyChart] = useState<DailyWorldChart[]>();\n    const { stats: worldStats } = useStats<WorldSummary>();\n    const { stats: worldDailyStats } = useStats<WorldDailySummary[]>(\"daily\");\n    const { stats: topCountriesStats, names: countriesNames } = useTopCountriesStats(10, new Date(START_DATE));\n\n    useEffect(() => {\n        setTopCountriesChartData(Object.entries(topCountriesStats)\n            .sort((first, second) => new Date(first[0]).getTime() - new Date(second[0]).getTime())\n            .map(([date, countries]) => { return { date, ...countries } }));\n\n    }, [topCountriesStats]);\n\n    useEffect(() => {\n        if (worldDailyStats) {\n            setWorldDailyChart(worldDailyStats.map(stat => {\n                return {\n                    date: stat.reportDate,\n                    confirmed: stat.totalConfirmed,\n                    deaths: stat.deaths.total\n                }\n            }).sort((first, second) => new Date(first.date).getTime() - new Date(second.date).getTime()));\n        }\n    }, [worldDailyStats])\n\n    return <>\n        {!worldStats && <LoadAnimation />}\n        {worldStats && <div>\n            <SummaryStatus confirmed={worldStats.confirmed.value}\n                recovered={worldStats.recovered.value}\n                deaths={worldStats.deaths.value}\n                title=\"World's Stats\" />\n        </div>}\n        {worldDailyChart && <div className=\"charts-group\">\n            <Chart data={worldDailyChart} xAxisKey=\"date\" title=\"Confirmed\"\n                yAxisKeys={[{ key: \"confirmed\" }]} width={450} />\n            <Chart data={worldDailyChart} xAxisKey=\"date\" title=\"Deaths\"\n                yAxisKeys={[{ key: \"deaths\", color: \"red\" }]} width={450}/>\n        </div>}\n        {topCountriesChartData && countriesNames &&\n            <Chart data={topCountriesChartData} xAxisKey=\"date\" title=\"Top countries\"\n                yAxisKeys={countriesNames.map(_ => { return { key: _ } })} width={1000} height={450} />}\n    </>\n}","import { useEffect, useState } from \"react\";\n\nimport { Dictionary, CountryRegion } from \"../utils/types\";\nimport { useDailyStats } from \"./useDailyStats\";\nimport { get } from \"./data\";\n\nexport default function useTopCountriesStats(maxCountries: number, startDate: Date) {\n    const [topCountriesNames, setTopCountriesNames] = useState<string[]>([]);\n    const [topCountriesStats, setTopCountriesStats] = useState<Dictionary<Dictionary<number>>>({});\n    const allDailyStats = useDailyStats(startDate);\n\n    useEffect(() => {\n        async function fetchTopCountries() {\n            const allCountries = await get<CountryRegion[]>(\"confirmed\");\n\n            const countries = allCountries\n                .reduce((allCountries, region) => {\n                    if (allCountries[region.countryRegion]) allCountries[region.countryRegion] += region.confirmed;\n                    else allCountries[region.countryRegion] = region.confirmed;\n\n                    return allCountries;\n                }, {} as Dictionary<number>);\n\n            setTopCountriesNames(Object.entries(countries)\n                .sort((a, b) => b[1] - a[1])\n                .slice(0, maxCountries)\n                .map(([country, confirmed]) => country));\n        }\n\n        fetchTopCountries();\n    }, [maxCountries]);\n\n    useEffect(() => {\n        const dailyStats: Dictionary<Dictionary<number>> = {};\n\n        if (topCountriesNames && Object.keys(allDailyStats).length > 0) {\n            topCountriesNames.map(country => { return { stats: allDailyStats[country], country } })\n                .forEach(({ stats, country }) => {\n                    // console.log(\"stats\", stats, country, allDailyStats);\n                    Object.entries(stats).forEach(([date, stat]) => {\n                        if (dailyStats[date]) dailyStats[date][country] = stat.confirmed;\n                        else dailyStats[date] = { [country]: stat.confirmed };\n                    })\n\n                })\n\n            console.log(\"dailyStats\", dailyStats);\n            setTopCountriesStats(dailyStats);\n        }\n\n    }, [allDailyStats]);\n\n    return {stats: topCountriesStats, names: topCountriesNames};\n}","import \"./CountryPicker.scss\";\n\nimport React from \"react\";\n\nimport { useStats } from \"../providers/useStats\";\nimport { CountriesNames } from \"../utils/types\";\n\ninterface Props {\n    setCountry: (country: string) => void;\n    setCountryName: (name: string) => void;\n    country: string;\n}\n\nexport default function CountryPicker(props: Props) {\n    const { stats: countriesNames } = useStats<CountriesNames>(\"countries\");\n\n    function onCountryChange(e: React.FormEvent<HTMLSelectElement>) {\n        const country = e.currentTarget.value;\n\n        props.setCountry(country);\n        props.setCountryName(findFullCountryName(country));\n    }\n\n    function findFullCountryName(countryIso2: string) {\n        if (countriesNames) {\n            const result = countriesNames.countries.find(country => countryIso2 === country.iso2);\n            console.log(\"result\", result);\n            if (result) return result.name;\n        }\n\n        return \"cannot be found\";\n    }\n\n    return <div className=\"input-group\">\n        <div className=\"input-label\">Pick a country</div>\n        <select className=\"input\" onChange={onCountryChange} value={props.country}>\n            {countriesNames && countriesNames.countries.map(country =>\n                <option key={country.name} value={country.iso2}>\n                    {country.name}\n                </option>)}\n        </select>\n    </div>\n}","import React from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, } from 'recharts';\n\ninterface Props {\n    title?: string;\n    width: number;\n    height: number;\n    data: any;\n    xAxisKey: string;\n    barKeys: BarKey[];\n}\n\ninterface BarKey {\n    key: string;\n    color?: string;\n}\n\nexport default function Chart(props: Props) {\n    return <BarChart width={props.width} height={props.height} data={props.data} margin={{ top: 5, right: 30, left: 20, bottom: 5, }}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey={props.xAxisKey} />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        {props.barKeys.map(key => <Bar dataKey={key.key} fill={key.color ? key.color : \"#8884d8\"} />)}\n    </BarChart>\n}\n","import \"./CountryStats.scss\";\n\nimport React, { useState, useEffect } from \"react\";\n\nimport { useStats } from \"../providers/useStats\";\nimport { useDailyStats } from \"../providers/useDailyStats\";\nimport { CountrySummary } from \"../utils/types\";\nimport CountryPicker from \"./CountryPicker\";\nimport SummaryStatus from \"./SummaryStats\";\nimport LoadAnimation from \"../utils/LoadAnimation\";\nimport Chart from \"../utils/Chart\";\nimport BarChart from \"../utils/BarChart\";\n\nconst START_DATE = \"1/22/2020\";\n\ninterface Chart {\n    date: string;\n    confirmed: number;\n    deaths: number;\n    recovered: number;\n}\n\ninterface DailyDelta {\n    date: string;\n    confirmedDelta: number;\n    deathsDelta: number;\n    recoveredDelta: number;\n}\n\nexport default function CountryStats() {\n    const [country, setCountry] = useState<string>(\"IL\");\n    const [countryName, setCountryName] = useState<string>(\"Israel\");\n    const [dailyChartData, setDailyChartData] = useState<Chart[] | undefined>();\n    const [deltaChart, setDeltaChart] = useState<DailyDelta[]>();\n    const { stats: countryStats, error: countryError } = useStats<CountrySummary>(`countries/${country}`);\n    const dailyStats = useDailyStats(new Date(START_DATE));\n\n    const yAxisKeys = [\n        { key: \"confirmed\" },\n        { key: \"recovered\", color: \"green\" },\n        { key: \"deaths\", color: \"red\" }\n    ];\n\n    const barKeys = [\n        { key: \"confirmedDelta\" },\n        { key: \"recoveredDelta\", color: \"green\" },\n        { key: \"deathsDelta\", color: \"red\" }\n    ];\n\n    useEffect(() => {\n        if (dailyStats && dailyStats[countryName] && Object.entries(dailyStats[countryName]).length > 0)\n            setDailyChartData(Object.entries(dailyStats[countryName])\n                .map(([date, stat]) => {\n                    return { date, ...stat };\n                }).sort((first, second) => new Date(first.date).getTime() - new Date(second.date).getTime()));\n    }, [countryName, dailyStats]);\n\n    useEffect(() => {\n        if (dailyChartData) {\n            const delta: DailyDelta[] = [];\n            const firstDayDelta: Chart = {\n                date: \"\",\n                confirmed: 0,\n                deaths: 0,\n                recovered: 0,\n            }\n\n            dailyChartData.reduce((prevDay, currDay) => {\n                delta.push({\n                    date: currDay.date,\n                    confirmedDelta: Math.abs(currDay.confirmed - prevDay.confirmed),\n                    deathsDelta: Math.abs(currDay.deaths - prevDay.deaths),\n                    recoveredDelta: Math.abs(currDay.recovered - prevDay.recovered),\n                })\n                return currDay;\n            }, firstDayDelta);\n\n            setDeltaChart(delta);\n        }\n    }, [dailyChartData])\n\n    return <>\n        {!countryStats && <LoadAnimation />}\n        {countryStats && <div>\n            {!countryError && <SummaryStatus confirmed={countryStats.confirmed.value}\n                deaths={countryStats.deaths.value}\n                recovered={countryStats.recovered.value}\n                title={countryName + \"'s Stats\"} />}\n            {countryError && <div>Could not find data for {countryName} at the moment...</div>}\n        </div>}\n        <CountryPicker setCountry={setCountry} setCountryName={setCountryName} country={country} />\n\n        {dailyStats && dailyChartData && <>\n            <Chart data={dailyChartData} xAxisKey=\"date\" yAxisKeys={yAxisKeys} width={1000} />\n            <div className=\"charts-group\">\n                {yAxisKeys.map(key =>\n                    <div key={key.key}><Chart data={dailyChartData} xAxisKey=\"date\" yAxisKeys={[key]} title={key.key} /></div>)}\n            </div>\n            <div className=\"charts-group\">\n                {barKeys.map(key =>\n                    <div key={key.key}><BarChart data={deltaChart} xAxisKey=\"date\" barKeys={[key]} width={335} height={300} /></div>)}\n            </div>\n        </>}\n    </>\n}","import \"./Main.scss\";\n\nimport React from \"react\";\n\nimport WorldStats from \"./WorldStats\";\nimport CountryStats from \"./CountryStats\";\n\nexport default function Main() {\n    return <div className=\"main\">\n        <div className=\"title\">Covid19 Statistics</div>\n        <div className=\"container\">\n            <WorldStats />\n        </div>\n        <div className=\"container\">\n            <CountryStats />\n        </div>\n    </div>\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from '././components/Main';\n\nReactDOM.render(<Main />, document.getElementById('root'));"],"sourceRoot":""}